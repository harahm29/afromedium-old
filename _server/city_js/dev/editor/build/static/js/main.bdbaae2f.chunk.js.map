{"version":3,"sources":["ObjectUI.js","ImportOBJ.js","ExportScene.js","ResetScene.js","Menu.js","index.js"],"names":["ObjectUI","_ref","_this","mesh","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","state","collapse","changeScale","event","val","target","value","scale","set","userData","changeBuffer","buffer","changeSide","parseInt","side","material","changeShadows","shadows","changeMap","files","length","file","filename","name","reader","FileReader","img","Image","texture","BABYLON","wrapS","wrapT","onload","needsUpdate","addEventListener","src","result","readAsDataURL","map","console","log","changeAlpha","alphaMap","transparent","alpha","changeLightMap","lightMap","lightmap","changeAlphaTest","alphaTest","changeTransparent","changeColor","color","changeCollider","collider","wireframe","changeWireframe","changeOpacity","opacity","changePosX","pos","position","x","changePosY","z","changePosZ","y","changeRotX","rot","rotation","Math","PI","changeRotY","changeRotZ","changeVisible","visisble","visible","count","i","wirframe","react_default","a","createElement","Container","Row","Col","Button","onClick","style","marginBottom","Collapse","isOpen","Card","CardBody","Form","FormGroup","Label","for","Input","type","id","onChange","selected","Component","OBJLoader","ColladaLoader","ImportOBJ","scene","extension","split","pop","toLowerCase","contents","collada","parse","children","geometry","translate","rotateX","rotateY","rotateZ","add","ReactDOM","render","src_ObjectUI","key","uuid","document","getElementById","readAsText","object","JSZip","loadAsync","then","zip","async","assets","JSON","geos","textures","jsonloader","total","current","onLoad","mat","data","geo","s","fromArray","undefined","_loop","curAsset","folder","fromGeometry","Uint8Array","blob","Blob","body","appendChild","URL","createObjectURL","readAsBinaryString","alert","className","ExportScene","locTextures","locGeometry","toJSON","metadata","version","generator","parameters","vertices","vertex","push","faces","normals","normalsHash","colors","colorsHash","uvs","uvsHash","uvs2","uvsHash2","face","hasFaceVertexUv","faceVertexUvs","hasFaceVertexUv2","hasFaceNormal","normal","hasFaceVertexNormal","vertexNormals","hasFaceColor","r","g","b","hasFaceVertexColor","vertexColors","faceType","setBit","c","materialIndex","getUvIndex","faceVertexUvs2","getUvIndex2","getNormalIndex","getColorIndex","enabled","hash","toString","getHex","uv","obj","locations","imgList","asset","indexOf","image","base64","fromBufferGeometry","stringify","generateAsync","content","saveAs","ResetScene","Menu","importOBJ","importDAE","setSceneWirframe","sceneWirframe","parent","importDropdownOpen","Navbar","light","expand","addon","aria-label","checked","NavbarToggler","navbar","Nav","NavItem","NavLink","src_ImportOBJ","src_ExportScene","src_ResetScene","OrbitControls","require","objectGroup","App","onWindowResize","camera","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","renderer","setSize","mount","domElement","line","controls","animate","requestAnimationFrame","update","_this2","ref","rootElement","src_App","src_Menu"],"mappings":"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","file":"static/js/main.bdbaae2f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Collapse, Button, CardBody, Card, Container, Row, Col, Form, FormGroup, Label, Input } from 'reactstrap';\nimport * as BABYLON from \"babylon\";\n\nclass ObjectUI extends Component {\n  constructor({ mesh }) {\n    super();\n    //console.log(mesh.userData);\n    let count = 0;\n    var state = {};\n    for (let i in mesh.userData) {\n      count++;\n      state[i] = mesh.userData[i];\n    }\n    this.mesh = mesh;\n    if (count) {\n      this.state = state;\n    }\n    else {\n      this.state = {\n        collapse: false,\n        scale: '1',\n        buffer: '1',\n        side: '0',\n        shadows: false,\n        map: null,\n        alpha: null,\n        lightmap: null,\n        alphaTest: '0',\n        transparent: '0',\n        opacity: '1',\n        color: 'ffffff',\n        collider: '0',\n        wirframe: '0',\n        pos: [0, 0, 0],\n        rot: [0, 0, 0]\n      };\n\n\n      this.mesh.userData = {\n        scale: '1',\n        buffer: '1',\n        side: '0',\n        shadows: false,\n        map: null,\n        alpha: null,\n        lightmap: null,\n        alphaTest: '0',\n        transparent: '0',\n        opacity: '1',\n        color: 'ffffff',\n        collider: '0',\n        wirframe: '0',\n        pos: [0, 0, 0],\n        rot: [0, 0, 0]\n      };\n    }\n\n    this.state.visible = true;\n    //this.updateUserData();\n\n\n    //console.log(mesh);\n\n  }\n\n  toggle = () => {\n    this.setState(state => ({ collapse: !state.collapse }));\n  }\n\n  changeScale = (event) => {\n    //console.log(event.target.value);\n    let val = event.target.value;\n    this.setState(state => ({ scale: val }));\n    this.mesh.scale.set(val, val, val);\n    this.mesh.userData.scale = val;\n    //this.updateUserData();\n\n  }\n\n  changeBuffer = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ buffer: val }));\n    //this.updateUserData();\n    this.mesh.userData.buffer = val;\n  }\n\n  changeSide = (event) => {\n\n    let val = parseInt(event.target.value);\n\n    this.setState(state => ({ side: val }));\n    this.mesh.material.side = val;\n    //this.updateUserData();\n    this.mesh.userData.side = val;\n\n  }\n\n  changeShadows = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ shadows: val }));\n    //this.updateUserData();\n    this.mesh.userData.shadows = val;\n  }\n\n  changeMap = (event) => {\n\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n      //console.log(file.name);\n      //var extension = filename.split('.').pop().toLowerCase();\n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n        //console.log(texture);\n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.material.map = texture;\n      this.mesh.material.needsUpdate = true;\n      console.log(file.name);\n      this.setState(state => ({ map: filename }));\n      //this.updateUserData();\n      this.mesh.userData.map = filename;\n      event.target.value = '';\n    }\n\n  }\n\n  changeAlpha = (event) => {\n\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n      //console.log(file.name);\n      //var extension = filename.split('.').pop().toLowerCase();\n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n        //console.log(texture);\n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.material.alphaMap = texture;\n      this.mesh.material.transparent = true;\n      this.mesh.material.needsUpdate = true;\n\n      this.setState(state => ({ alpha: filename }));\n      this.setState(state => ({ transparent: '1' }));\n      //this.updateUserData();\n      this.mesh.userData.alpha = filename;\n      this.mesh.userData.transparent = '1';\n      event.target.value = '';\n    }\n  }\n\n  changeLightMap = (event) => {\n\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n      //console.log(file.name);\n      //var extension = filename.split('.').pop().toLowerCase();\n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n        //console.log(texture);\n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.material.lightMap = texture;\n      this.mesh.material.needsUpdate = true;\n\n      this.setState(state => ({ lightMap: filename }));\n      //this.updateUserData();\n      //console.log(this.state);\n      this.mesh.userData.lightmap = filename;\n      event.target.value = '';\n    }\n  }\n\n  changeAlphaTest = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ alphaTest: val }));\n    this.mesh.material.alphaTest = val;\n    //this.updateUserData();\n    this.mesh.userData.alphaTest = val;\n\n  }\n\n  changeTransparent = (event) => {\n    let val = parseInt(event.target.value);\n    this.setState(state => ({ transparent: val }));\n    this.mesh.material.transparent = (val || this.state.alpha) ? true : false;\n    this.mesh.material.needsUpdate = true;\n    //console.log(this.mesh.material.transparent, val,  this.state.alpha, (val || this.state.alpha));\n    //this.updateUserData();\n    this.mesh.userData.transparent = val;\n\n  }\n\n\n  changeColor = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ color: val }));\n    this.mesh.material.color.set(parseInt(val, 16));\n    //this.updateUserData();\n    this.mesh.userData.color = val;\n\n  }\n\n  changeCollider = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ collider: val }));\n    if (val === '1') {\n      this.setState(state => ({ buffer: '0' }));\n    }\n    else {\n      this.setState(state => ({ buffer: '1' }));\n    }\n\n\n    this.mesh.material.wireframe = (val == '1') ? true : false;\n\n    this.mesh.material.needsUpdate = true;\n    //this.updateUserData();\n    this.mesh.userData.collider = val;\n\n  }\n\n  changeWireframe = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ wireframe: val }));\n\n\n    this.mesh.material.wireframe = (val === '1' || this.state.collider == '1') ? true : false;\n\n    this.mesh.material.needsUpdate = true;\n    //this.updateUserData();\n    this.mesh.userData.wireframe = val;\n\n  }\n\n  changeOpacity = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ opacity: val }));\n    this.mesh.material.opacity = val;\n    //this.updateUserData();\n    this.mesh.userData.opacity = val;\n\n  }\n\n\n\n  changePosX = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [val, this.state.pos[1], this.state.pos[2]] }));\n    this.mesh.position.x = val;\n    //this.updateUserData();\n    this.mesh.userData.pos[0] = val;\n\n  }\n\n  changePosY = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.pos[0], val, this.state.pos[2]] }));\n    this.mesh.position.z = val;\n    //this.updateUserData();\n    this.mesh.userData.pos[1] = val;\n\n  }\n\n  changePosZ = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.pos[0], this.state.pos[1], val] }));\n    this.mesh.position.y = val;\n    //this.updateUserData();\n    this.mesh.userData.pos[2] = val;\n\n  }\n\n  changeRotX = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ rot: [val, this.state.rot[1], this.state.rot[2]] }));\n    this.mesh.rotation.x = val / 180 * Math.PI;\n    //this.updateUserData();\n    this.mesh.userData.rot[0] = val;\n\n  }\n\n  changeRotY = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.rot[0], val, this.state.rot[2]] }));\n    this.mesh.rotation.y = val / 180 * Math.PI;\n    //this.updateUserData();\n    this.mesh.userData.rot[1] = val;\n\n  }\n\n  changeRotZ = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.rot[0], this.state.rot[1], val] }));\n    this.mesh.rotation.z = val / 180 * Math.PI;\n    //this.updateUserData();\n    this.mesh.userData.rot[2] = val;\n  }\n\n  changeVisible = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ visisble: val }));\n    this.mesh.visible = (val == '1') ? true : false;\n    //console.log(this.mesh.visible);\n  }\n\n\n  render() {\n    //console.log(this.state.transparent);\n    return (\n      <div>\n        <Container>\n          <Row>\n            <Col>{this.mesh.name}</Col>\n            <Col>  <Button color=\"primary\" onClick={this.toggle} style={{ marginBottom: '1rem' }}>Options</Button></Col>\n          </Row>\n        </Container>\n\n        <Collapse isOpen={this.state.collapse}>\n          <Card>\n            <CardBody>\n              <Form>\n                <FormGroup>\n                  <Label for=\"buffer\">Visible</Label>\n                  <Input type=\"select\" name=\"visible\" id=\"buffer\" onChange={this.changeVisible}>\n                    <option selected={this.state.visisble == '1'}>1</option>\n                    <option selected={this.state.visisble == '0'}>0</option>\n\n\n                  </Input>\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"scale\">Scale</Label>\n                  <Input name=\"scale\" id=\"scale\" value={this.state.scale} onChange={this.changeScale} />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"buffer\">BufferGeometry</Label>\n                  <Input type=\"select\" name=\"buffer\" id=\"buffer\" onChange={this.changeBuffer}>\n                    <option selected={this.state.buffer == '1'}>1</option>\n                    <option selected={this.state.buffer == '0'}>0</option>\n\n\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"side\">Face Side</Label>\n                  <Input type=\"select\" name=\"side\" id=\"side\" onChange={this.changeSide}>\n                    <option>0</option>\n                    <option>1</option>\n                    <option>2</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"shadows\">Floor (shadows)</Label>\n                  <Input type=\"select\" name=\"shadows\" id=\"shadows\" onChange={this.changeShadows}>\n                    <option>0</option>\n                    <option>1</option>\n                  </Input>\n                </FormGroup>\n\n\n                <FormGroup>\n                  <Label for=\"map\">Diffuse map</Label>\n                  <Input type=\"file\" name=\"map\" id=\"map\" onChange={this.changeMap} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"alpha\">Alpha map</Label>\n                  <Input type=\"file\" name=\"alpha\" id=\"alpha\" onChange={this.changeAlpha} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"light\">Light map</Label>\n                  <Input type=\"file\" name=\"light\" id=\"light\" onChange={this.changeLightMap} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"alphaTest\">alphaTest</Label>\n                  <Input name=\"alphaTest\" id=\"alphaTest\" value={this.state.alphaTest} onChange={this.changeAlphaTest} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"transparent\">Transparent</Label>\n                  <Input type=\"select\" name=\"transparent\" id=\"transparent\" onChange={this.changeTransparent}>\n                    <option selected={this.state.transparent == '0'}>0</option>\n                    <option selected={this.state.transparent == '1'}>1</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"opacity\">Opacity</Label>\n                  <Input name=\"scale\" id=\"scale\" value={this.state.opacity} onChange={this.changeOpacity} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"color\">Color</Label>\n                  <Input name=\"color\" id=\"color\" value={this.state.color} onChange={this.changeColor} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"collider\">Collider</Label>\n                  <Input type=\"select\" name=\"collider\" id=\"collider\" onChange={this.changeCollider}>\n                    <option>0</option>\n                    <option>1</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"wireframe\">Wireframe</Label>\n                  <Input type=\"select\" name=\"wireframe\" id=\"wireframe\" onChange={this.changeWireframe}>\n                    <option>0</option>\n                    <option>1</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"pos\">Position</Label>\n                  <Input name=\"posX\" id=\"posX\" value={this.state.pos[0]} onChange={this.changePosX} />\n                  <Input name=\"posY\" id=\"posY\" value={this.state.pos[1]} onChange={this.changePosY} />\n                  <Input name=\"posZ\" id=\"posZ\" value={this.state.pos[2]} onChange={this.changePosZ} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"pos\">Rotation</Label>\n                  <Input name=\"rotX\" id=\"rotX\" value={this.state.rot[0]} onChange={this.changeRotX} />\n                  <Input name=\"rotY\" id=\"rotY\" value={this.state.rot[1]} onChange={this.changeRotY} />\n                  <Input name=\"rotZ\" id=\"rotZ\" value={this.state.rot[2]} onChange={this.changeRotZ} />\n                </FormGroup>\n\n\n\n              </Form>\n            </CardBody>\n          </Card>\n        </Collapse>\n\n      </div>\n    )\n  }\n}\n\nexport default ObjectUI;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ObjectUI from './ObjectUI';\nimport * as BABYLON from \"babylon\";\nimport * as OBJLoader from 'babylon-obj-loader';\nimport * as ColladaLoader from 'babylon-collada-loader';\nimport './index.css';\nimport JSZip from \"jszip\";\n\nOBJLoader(BABYLON);\nColladaLoader(BABYLON);\n\nclass ImportOBJ extends Component {\n    constructor({ scene }) {\n        super();\n\n        this.scene = scene;\n\n    }\n\n    toggle = (event) => {\n        //console.log(event);\n        let files = event.target.files;\n        if (files.length) {\n            var file = files[0];\n            var filename = file.name;\n            var extension = filename.split('.').pop().toLowerCase();\n            var reader = new FileReader();\n            //console.log(this.scene);\n            let scene = this.scene;\n\n            switch (extension) {\n                case 'dae':\n\n                    reader.addEventListener('load', (event) => {\n\n                        var contents = event.target.result;\n                        this.BABYLON = BABYLON;\n\n                        var loader = new ColladaLoader();\n                        var collada = loader.parse(contents);\n\n                        collada.scene.name = filename;\n                        //this.scene.add(collada.scene);\n                        for (let i in collada.scene.children) {\n                            collada.scene.children[i].children[0].material = new BABYLON.MeshBasicMaterial();\n                            collada.scene.children[i].children[0].name = collada.scene.children[i].name;\n                            let pos = collada.scene.children[i].position;\n                            //collada.scene.children[i].children[0].position.copy(collada.scene.children[i].position);\n                            collada.scene.children[i].children[0].geometry.translate(pos.x, pos.y, pos.z);\n\n                            //collada.scene.children[i].children[0].rotation.copy(collada.scene.children[i].rotation);\n                            collada.scene.children[i].children[0].geometry.rotateX(collada.scene.children[i].rotation.x);\n                            collada.scene.children[i].children[0].geometry.rotateY(collada.scene.children[i].rotation.y);\n                            collada.scene.children[i].children[0].geometry.rotateZ(collada.scene.children[i].rotation.z);\n\n\n                            this.scene.add(collada.scene.children[i].children[0]);\n                        }\n                        //console.log(collada.scene.children);\n\n                        ReactDOM.render(\n                            <div>\n                                {\n                                    this.scene.children.map((mesh) => {\n\n                                        return (<ObjectUI key={mesh.uuid} mesh={mesh} />);\n                                    })\n                                }\n                            </div>, document.getElementById(\"ui\"));\n\n\n\n                    }, false);\n\n                    reader.readAsText(file);\n\n                    break;\n\n                case 'obj':\n\n                    reader.addEventListener('load', (event) => {\n\n                        var contents = event.target.result;\n                        //console.log( BABYLON.OBJLoader );\n                        this.BABYLON = BABYLON;\n                        var object = new this.BABYLON.OBJLoader().parse(contents);\n                        object.name = filename;\n\n                        //this.scene.add(object);\n                        //console.log(object);\n\n                        for (let i in object.children) {\n                            object.children[i].material = new BABYLON.MeshBasicMaterial();\n                            this.scene.add(object.children[i]);\n                        }\n                        ReactDOM.render(\n                            <div>\n                                {\n                                    this.scene.children.map((mesh) => {\n\n                                        return (<ObjectUI key={mesh.uuid} mesh={mesh} />);\n                                    })\n                                }\n                            </div>, document.getElementById(\"ui\"));\n\n                        //console.log(object);\n\n                    }, false);\n                    reader.readAsText(file);\n\n                    break;\n\n                case 'zip':\n                    reader.addEventListener('load', (event) => {\n                        let zip = new JSZip();\n                        zip.loadAsync(event.target.result)\n                            .then(function (zip) {\n                                zip.file('assets.js').async(\"string\").then(function (value) {\n                                    //console.log(value);\n                                    let assets = JSON.parse(value);\n                                    console.log(assets);\n                                    let geos = {};\n                                    let textures = {};\n                                    let jsonloader = new BABYLON.JSONLoader();\n                                    let total = 0;\n                                    let current = 0;\n                                    let onLoad = function () {\n                                        if (current == total) {\n                                            for (let i in assets) {\n                                                let mat = new BABYLON.MeshBasicMaterial();\n                                                let data = {\n                                                    color: 'ffffff',\n                                                    scale: assets[i].scale,\n                                                    buffer: (assets[i].buffer) ? '1' : '0',\n                                                    side: assets[i].side,\n                                                    shadows: (assets[i].shadows) ? '1' : '0',\n                                                    alphaTest: assets[i].alphaTest || '0',\n                                                    transparent: (assets[i].transparent) ? '1' : '0',\n                                                    opacity: assets[i].opacity,\n                                                    collider: (assets[i].collider) ? '1' : '0',\n                                                    wirframe: (assets[i].wirframe) ? '1' : '0',\n                                                    pos: assets[i].pos,\n                                                    rot: assets[i].rot\n                                                };\n\n                                                if (assets[i].map) {\n                                                    mat.map = textures[assets[i].map];\n                                                    data.map = assets[i].map;\n                                                }\n\n                                                if (assets[i].alpha) {\n                                                    mat.alphaMap = textures[assets[i].alpha];\n                                                    data.alpha = assets[i].alpha;\n                                                }\n\n                                                if (assets[i].lightmap) {\n                                                    mat.lightMap = textures[assets[i].lightmap];\n                                                    data.lightmap = assets[i].lightmap;\n                                                }\n\n                                                let mesh = new BABYLON.Mesh(geos[assets[i].geo], mat);\n\n                                                //console.log();\n                                                mesh.userData = data;\n\n                                                if (assets[i].alphaTest) {\n                                                    mat.alphaTest = assets[i].alphaTest;\n                                                }\n\n                                                if (assets[i].transparent) {\n                                                    mat.transparent = true;\n                                                }\n\n                                                if (assets[i].collider || assets[i].wireframe) {\n                                                    mat.wireframe = true\n                                                }\n\n                                                if (assets[i].side) {\n                                                    mat.side = assets[i].side;\n                                                }\n\n                                                if (assets[i].scale) {\n                                                    let s = assets[i].scale;\n                                                    mesh.scale.set(s, s, s);\n                                                }\n\n                                                let pos = data.pos;\n                                                mesh.position.fromArray(pos);\n\n                                                let rot = assets[i].rot;\n                                                mesh.rotation.x = rot[0] / 180 * Math.PI;\n                                                mesh.rotation.y = rot[1] / 180 * Math.PI;\n                                                mesh.rotation.z = rot[2] / 180 * Math.PI;\n\n                                                if (assets[i].opacity !== undefined) {\n                                                    mat.opacity = assets[i].opacity;\n                                                }\n\n\n                                                mesh.name = i;\n                                                scene.add(mesh);\n                                                //scope.scene.add(mesh);\n\n                                            }\n                                            //console.log(scene);\n\n                                            ReactDOM.render(\n                                                <div>\n                                                    {\n                                                        scene.children.map((mesh) => {\n\n                                                            return (<ObjectUI key={mesh.uuid} mesh={mesh} />);\n                                                        })\n                                                    }\n                                                </div>, document.getElementById(\"ui\"));\n                                        }\n                                        \n                                    };\n                                    for (let i in assets) {\n                                        total++;\n                                        let curAsset = assets[i];\n                                        zip.folder('geometry').folder('loc').file(assets[i].geo).async('string').then(function (value) {\n                                            current++;\n                                            let geo = jsonloader.parse(JSON.parse(value));\n                                            geos[curAsset.geo] = new BABYLON.BufferGeometry();\n                                            geos[curAsset.geo].fromGeometry(geo.geometry);\n                                            //console.log(geo);\n\n                                            onLoad();\n                                        });\n\n                                        if (assets[i].map) {\n                                            total++;\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].map).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.map] = new BABYLON.Texture(img);\n                                                    textures[curAsset.map].needsUpdate = true;\n                                                    textures[curAsset.map].wrapS = textures[curAsset.map].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.map].blob = blob;\n\n                                                });\n                                        }\n\n                                        if (assets[i].alpha) {\n                                            total++;\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].alpha).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.alpha] = new BABYLON.Texture(img);\n                                                    textures[curAsset.alpha].needsUpdate = true;\n                                                    textures[curAsset.alpha].wrapS = textures[curAsset.alpha].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.alpha].blob = blob;\n\n                                                });\n                                        }\n\n                                        if (assets[i].lightmap) {\n                                            total++;\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].lightmap).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.lightmap] = new BABYLON.Texture(img);\n                                                    textures[curAsset.lightmap].needsUpdate = true;\n                                                    textures[curAsset.lightmap].wrapS = textures[curAsset.lightmap].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.lightmap].blob = blob;\n\n                                                });\n                                        }\n\n                                    }\n                                });\n                                // you now have every files contained in the loaded zip\n                                //new_zip.file(\"hello.txt\").async(\"string\"); // a promise of \"Hello World\\n\"\n                            });\n                    }, false);\n                    reader.readAsBinaryString(file);\n\n                    break;\n                default:\n                    alert('bad format');\n                    break;\n            }\n           \n        }\n    }\n\n    render() {\n        return (\n            <label>Import<input type=\"file\" name=\"file\" onChange={this.toggle} className=\"hidden\" /></label>\n\n        )\n    }\n}\n\nexport default ImportOBJ;\n\n\n","import React, { Component } from \"react\";\nimport JSZip from \"jszip\";\nimport * as BABYLON from \"babylon\";\nimport { saveAs } from '@progress/kendo-file-saver';\n\nclass ExportScene extends Component {\n    constructor({ scene }) {\n        super();\n\n        this.scene = scene;\n\n    }\n\n    toggle = (event) => {\n        let zip = new JSZip();\n        let textures = zip.folder(\"textures\");\n        let locTextures = textures.folder('loc');\n        let geometry = zip.folder(\"geometry\");\n        let locGeometry = geometry.folder(\"loc\");\n\n        let toJSON = function () {\n\n            var data = {\n                metadata: {\n                    version: 4.5,\n                    type: 'Geometry',\n                    generator: 'Geometry.toJSON'\n                }\n            };\n\n            // standard Geometry serialization\n\n            data.uuid = this.uuid;\n            data.type = this.type;\n            if (this.name !== '') data.name = this.name;\n\n            if (this.parameters !== undefined) {\n\n                var parameters = this.parameters;\n\n                for (var key in parameters) {\n\n                    if (parameters[key] !== undefined) data[key] = parameters[key];\n\n                }\n\n                return data;\n\n            }\n\n            var vertices = [];\n\n            for (var i = 0; i < this.vertices.length; i++) {\n\n                var vertex = this.vertices[i];\n                vertices.push(vertex.x, vertex.y, vertex.z);\n\n            }\n\n            var faces = [];\n            var normals = [];\n            var normalsHash = {};\n            var colors = [];\n            var colorsHash = {};\n            var uvs = [];\n            var uvsHash = {};\n            var uvs2 = [];\n            var uvsHash2 = {};\n\n            for (var i = 0; i < this.faces.length; i++) {\n\n                var face = this.faces[i];\n\n                var hasMaterial = true;\n                var hasFaceUv = false; // deprecated\n                var hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;\n                var hasFaceVertexUv2 = this.faceVertexUvs[1] !== undefined;\n                var hasFaceNormal = face.normal.length() > 0;\n                var hasFaceVertexNormal = face.vertexNormals.length > 0;\n                var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n                var hasFaceVertexColor = face.vertexColors.length > 0;\n\n                var faceType = 0;\n\n                faceType = setBit(faceType, 0, 0); // isQuad\n                faceType = setBit(faceType, 1, hasMaterial);\n                faceType = setBit(faceType, 2, hasFaceUv);\n                faceType = setBit(faceType, 3, hasFaceVertexUv);\n                faceType = setBit(faceType, 4, hasFaceNormal);\n                faceType = setBit(faceType, 5, hasFaceVertexNormal);\n                faceType = setBit(faceType, 6, hasFaceColor);\n                faceType = setBit(faceType, 7, hasFaceVertexColor);\n\n                faces.push(faceType);\n                faces.push(face.a, face.b, face.c);\n                faces.push(face.materialIndex);\n\n                if (hasFaceVertexUv) {\n\n                    var faceVertexUvs = this.faceVertexUvs[0][i];\n\n                    faces.push(\n                        getUvIndex(faceVertexUvs[0]),\n                        getUvIndex(faceVertexUvs[1]),\n                        getUvIndex(faceVertexUvs[2])\n                    );\n\n                }\n\n                if (hasFaceVertexUv2) {\n\n                    var faceVertexUvs2 = this.faceVertexUvs[1][i];\n\n                    faces.push(\n                        getUvIndex2(faceVertexUvs2[0]),\n                        getUvIndex2(faceVertexUvs2[1]),\n                        getUvIndex2(faceVertexUvs2[2])\n                    );\n\n                }\n                else {\n                    console.log('no uv2');\n                }\n\n                if (hasFaceNormal) {\n\n                    faces.push(getNormalIndex(face.normal));\n\n                }\n\n                if (hasFaceVertexNormal) {\n\n                    var vertexNormals = face.vertexNormals;\n\n                    faces.push(\n                        getNormalIndex(vertexNormals[0]),\n                        getNormalIndex(vertexNormals[1]),\n                        getNormalIndex(vertexNormals[2])\n                    );\n\n                }\n\n                if (hasFaceColor) {\n\n                    faces.push(getColorIndex(face.color));\n\n                }\n\n                if (hasFaceVertexColor) {\n\n                    var vertexColors = face.vertexColors;\n\n                    faces.push(\n                        getColorIndex(vertexColors[0]),\n                        getColorIndex(vertexColors[1]),\n                        getColorIndex(vertexColors[2])\n                    );\n\n                }\n\n            }\n\n            function setBit(value, position, enabled) {\n\n                return enabled ? value | (1 << position) : value & (~(1 << position));\n\n            }\n\n            function getNormalIndex(normal) {\n\n                var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n                if (normalsHash[hash] !== undefined) {\n\n                    return normalsHash[hash];\n\n                }\n\n                normalsHash[hash] = normals.length / 3;\n                normals.push(normal.x, normal.y, normal.z);\n\n                return normalsHash[hash];\n\n            }\n\n            function getColorIndex(color) {\n\n                var hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n                if (colorsHash[hash] !== undefined) {\n\n                    return colorsHash[hash];\n\n                }\n\n                colorsHash[hash] = colors.length;\n                colors.push(color.getHex());\n\n                return colorsHash[hash];\n\n            }\n\n            function getUvIndex(uv) {\n\n                var hash = uv.x.toString() + uv.y.toString();\n\n                if (uvsHash[hash] !== undefined) {\n\n                    return uvsHash[hash];\n\n                }\n\n                uvsHash[hash] = uvs.length / 2;\n                uvs.push(uv.x, uv.y);\n\n                return uvsHash[hash];\n\n            }\n\n            function getUvIndex2(uv) {\n\n                var hash = uv.x.toString() + uv.y.toString();\n\n                if (uvsHash2[hash] !== undefined) {\n\n                    return uvsHash2[hash];\n\n                }\n\n                uvsHash2[hash] = uvs2.length / 2;\n                uvs2.push(uv.x, uv.y);\n\n                return uvsHash2[hash];\n\n            }\n\n            data.data = {};\n\n            data.data.vertices = vertices;\n            data.data.normals = normals;\n            if (colors.length > 0) data.data.colors = colors;\n            if (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility\n            if (uvs2.length > 0) data.data.uvs.push(uvs2);\n            console.log(uvs2);\n            data.data.faces = faces;\n\n            return data;\n\n        };\n\n\n        let assets = {};\n        let obj = [];\n        let locations = {\n            obj: obj,\n            z: 20\n        };\n        let imgList = [];\n        for (let i in this.scene.children) {\n            let mesh = this.scene.children[i];\n            let data = mesh.userData;\n            let asset = {};\n            asset.scale = data.scale;\n            asset.geo = mesh.name + '.js';\n            asset.buffer = data.buffer === '1' ? true : false;\n            //console.log(data.map);\n            if (data.map) {\n                asset.map = data.map;\n                if (imgList.indexOf(data.map) === -1) {\n                    imgList.push(data.map);\n                    if (mesh.material.map.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.map, mesh.material.map.blob);\n                    }\n                    else {\n                        let img = mesh.material.map.image.src.split(',');\n                        //console.log(img);\n                        locTextures.file(data.map, img[1], { base64: true });\n                    }\n                }\n\n            }\n\n            if (data.alpha) {\n                asset.alpha = data.alpha;\n                if (imgList.indexOf(data.alpha) === -1) {\n                    imgList.push(data.alpha);\n                    if (mesh.material.alphaMap.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.alpha, mesh.material.alphaMap.blob);\n                    }\n                    else {\n                        let img = mesh.material.alphaMap.image.src.split(',');\n                        locTextures.file(data.alpha, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.lightmap) {\n                asset.lightmap = data.lightmap;\n                if (imgList.indexOf(data.lightmap) === -1) {\n                    imgList.push(data.lightmap);\n                    if (mesh.material.lightMap.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.lightmap, mesh.material.lightMap.blob);\n                    }\n                    else {\n                        let img = mesh.material.lightMap.image.src.split(',');\n                        locTextures.file(data.lightmap, img[1], { base64: true });\n                    }\n                }\n            }\n\n            asset.side = parseInt(data.side);\n            if (data.shadows === '1') {\n                asset.shadows = true;\n            }\n\n            if (data.alphaTest > 0) {\n                asset.alphaTest = data.alphaTest;\n            }\n            if (data.transparent === '1') {\n                asset.transparent = true;\n            }\n\n            asset.opacity = data.opacity;\n\n            asset.color = parseInt(data.color, '16');\n            if (data.collider === '1') {\n                asset.collider = true;\n            }\n\n            if (data.wirframe === '1') {\n                asset.wirframe = true;\n            }\n\n            asset.pos = data.pos;\n            asset.rot = data.rot;\n\n            assets[mesh.name] = asset;\n            obj.push({ id: mesh.name });\n\n            let geo;\n\n            if (mesh.geometry.type === 'BufferGeometry') {\n                geo = new BABYLON.Geometry();\n                geo.fromBufferGeometry(mesh.geometry);\n            }\n            else {\n                geo = mesh.geometry;\n            }\n            //console.log(mesh.geometry, geo);\n            geo.toJSON = toJSON;\n\n            locGeometry.file(mesh.name + '.js', JSON.stringify(geo.toJSON().data));\n\n\n\n        }\n        zip.file('assets.js', JSON.stringify(assets));\n        zip.file('locations.js', JSON.stringify(locations));\n\n        zip.generateAsync({ type: \"blob\" })\n            .then(function (content) {\n                saveAs(content, \"export.zip\");\n\n            });\n\n\n    }\n\n    render() {\n        return (<div onClick={this.toggle} > Export </div>\n\n        )\n    }\n}\n\nexport default ExportScene;","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass ResetScene extends Component {\n    constructor({ scene }) {\n        super();\n\n        this.scene = scene;\n\n    }\n\n    toggle = (event) => {\n        ReactDOM.render(<div></div>, document.getElementById(\"ui\"));\n        this.scene.children = [];\n\n    }\n\n    render() {\n        return ( <div onClick ={this.toggle} >Reset</div>\n\n        )\n    }\n}\n\nexport default ResetScene;","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ImportOBJ from \"./ImportOBJ\";\nimport ExportScene from \"./ExportScene\";\nimport ResetScene from \"./ResetScene\"\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  Nav,\n  NavItem,\n  NavLink,\n  InputGroup, InputGroupAddon, InputGroupText, Input\n} from 'reactstrap';\n\nclass Menu extends Component {\n  constructor({ scene }) {\n    super();\n    this.state = {\n      importDropdownOpen: false,\n      sceneWirframe: true\n    };\n    this.scene = scene;\n    //console.log(scene);\n\n  }\n\n  importOBJ = () => {\n    console.log('import obj');\n  }\n\n  importDAE = () => {\n    console.log('import DAE');\n  }\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <label>\n            <Input addon type=\"checkbox\" aria-label=\"Show scene wirframe\" checked={this.state.sceneWirframe} onChange={this.setSceneWirframe}/>\n            Show scene wirframe\n          </label>\n\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n\n              <NavItem>\n                <NavLink>  <ImportOBJ scene={this.scene} /></NavLink>\n              </NavItem>\n\n\n              <NavItem>\n                <NavLink ><ExportScene scene={this.scene} /></NavLink>\n              </NavItem>\n\n              <NavItem>\n                <NavLink ><ResetScene scene={this.scene} /></NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    )\n  }\n\n  setSceneWirframe = () => {\n    this.setState({\n      sceneWirframe: !this.state.sceneWirframe\n    });\n    this.scene.parent.children[1].visible = !this.state.sceneWirframe;\n    console.log( this.scene.parent.children, this.state.sceneWirframe);\n  }\n}\n\nexport default Menu;\n","import React, { Component}  from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './index.css';\nimport * as BABYLON from \"babylon\";\nimport  Menu from './Menu';\n\n\n\n\nconst OrbitControls = require(\"babylon-orbit-controls\")(BABYLON);\n\n\nvar scene = new BABYLON.Scene(), objectGroup = new BABYLON.Group();\nscene.add(objectGroup);\n\nclass App extends Component {\n    componentDidMount() {\n      var camera = new BABYLON.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 1, 30000 );\n      this.camera = camera;\n      var renderer = new BABYLON.WebGLRenderer();\n      this.renderer = renderer;\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      this.mount.appendChild( renderer.domElement );\n     \n      camera.position.z = 150;\n      camera.position.y = 150;\n      var size = 2500,\n      step = 50;\n      var geometry = new BABYLON.Geometry();\n     for (var i = -size; i <= size; i += step) {\n         geometry.vertices.push(new BABYLON.Vector3(-size, 0, i));\n         geometry.vertices.push(new BABYLON.Vector3(size, 0, i));\n         geometry.vertices.push(new BABYLON.Vector3(i, 0, -size));\n         geometry.vertices.push(new BABYLON.Vector3(i, 0, size));\n     }\n     var material = new BABYLON.LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });\n     var line = new BABYLON.LineSegments(geometry, material);\n     scene.add(line);\n\n     \n      const controls = new OrbitControls( camera, renderer.domElement );\n      var animate = function () {\n        requestAnimationFrame( animate );\n        controls.update();\n        renderer.render( scene, camera );\n      };\n      window.addEventListener('resize', this.onWindowResize, false);\n      animate();\n    }\n\n    onWindowResize = () =>{\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    render() {\n      return (\n        <div ref={ref => (this.mount = ref)} />\n      )\n    }\n  }\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nReactDOM.render(<Menu scene={objectGroup} />, document.getElementById(\"menu\"));\n"],"sourceRoot":""}